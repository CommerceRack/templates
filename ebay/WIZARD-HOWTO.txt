MAGIC (WIZARD) HOWTO

The goal of an HTML template should be to provide a simple, straightforward step-by-step approach to 
let end-users who are not proficient in HTML, and who are uncomfortable/unwilling to use the HTML editor 
to tweak their template.  

The stated goals for a magic file are: 
	1. make it easy/fast/simple (requiring little thought)
	2. try and limit the number of choices to only what actually looks good together
	3. make all choices compatible, never have "incompatible choices"
	4. whenever possible avoid edge cases, they are NOT suitable for the wizard.
	5. try and instantly give feedback, and make changes reversable. 

So a good magic experience offers a limited number of highly cohesive choices.  If a user wants to customize 
a template beyond what the magic allows they will need to either learn HTML or employ somebody who knows it.  

The template is stored in index.html, it should use KISS markup which will interpolated with object data 
at render time.  This document assumes the magic author is already familiar with KISS markup, and
also a moderate level of javascript/jQuery. 

The word "template" refers to the index.html file and any/all required graphics, along with the wizard.html
which is optional.  The wizard.html file is intentionally tightly coupled to the index.html file, and provide
a simple step-by-step approach to customizing the index.html using javascript.  The wizard.html file is stored
separately so the resulting index.html is free from extraneous code and javascript (making the wizard result
easier to edit for a novice user). 

INTO THE WEEDS: 
Internally a magically is a series of steps, each step is contained inside an HTML <fieldset>.  The steps are
processed sequentially based on the order they appear in the file.

Sample:

<fieldset data-wizard-element-id="STEP1">
<legend>Step 1</legend>
<label for="step1_checkbox">step1 checkbox</label>
<input id="step1_checkbox" />
</fieldset>

<fieldset data-wizard-element-id="STEP2">
<legend>Step 2</legend>
<label for="step2_txt">step2 textarea</label>
<textarea id="step2_txt"></textarea>
</fieldset>


FIELDSET BEST PRACTICES:
Fieldsets can include more than one input, such as multiple checkboxes.  Best practices dictate that fields on
a step should be related to one another.  For example grouping shipping icons and shipping policy is okay, 
but don't group all policies together.   

If a fieldset includes more than one input, include a legend.  Buttons in the fieldset will have jqueryui button()
applied to them.  Apply the CSS class="labelsAsBreaks" to the fieldset to have labels treated as block elements.

It is a good idea to include HTML comments in the wizard.html explaining what/where in the index.html is looking
for, and also in the index.html to identify fields linked/controlled by the wizard. 

LEARNING MAGIC:
Each fieldset will use javascript/jQuery to interact with the index.html using a series of "kiss_xxxx" functions 
associated with onClick actions within buttons or other input types.  Developers should take care to only interact
with the index.html via the KISS magic methods since they will provide excellent error handling/diagnostics to handle
likely situations where a user has edited the index.html in such a way that has disabled/broken the associated 
wizard (such as removing a div that would contain wizard configurable html).  

** MAGIC AUTHORS SHOULD ALWAYS EXPECT/ANTICIPATE THAT THE USER HAS EDITED THE INDEX.HTML AND BROKEN THE WIZARD **
** AS SUCH MAGIC CODE WILL ATTEMPT [WHENEVER POSSIBLE] TO PROVIDE DIAGNOSTIC "THIS IS WHY I'M BROKEN" ASSISTANCE **

The KISS Magic functions are:

* function kiss_inspect('ID') 
  sets the focus of the object inspector and also returns a jQuery reference to the object if found.
  
* function kiss_medialib('IMAGE_ID')
  prompts the user to select an image from their media library, copies the image into the template and selects it at the id specified.

  
CURRENT: * function kiss_implement('VERB',{'$id':'ELEMENT_ID'})
FUTURE:  * function kiss_implement('ELEMENT_ID','VERB',{'otherparameter':'value'})

  this implements an action (VERB) on the index.html document
  verbs are:
  *  hide { 'attrib':'value' }  	 -- sets the css class of an id to 'none' (making it invisible), also sets any 'attrib':'value' (optional)
  *  show { 'attrib':'value'}  		 -- sets the css class of an id to 'inline' (making it visible), also sets any 'attrib':'value' (optional)
  *  set-value  { '$html':'value' } -- sets the inner html of an element, such as a div. 
  *  set-attribs  { 'attrib':'value' } -- sets the attributes of an id, such as the height="" and width="" of an image.
  *  append  { '$html':'value' }	 -- appends content to the html inside the id specified. 
  *  empty   {}		   				 -- empties the html inside the id specified.
  
CURRENT: hide/show do not suppor optional 'attrib':'value'
CURRENT: set-value uses '$input' instead of '$html'
CURRENT: append uses 'html' instead of '$html'

-------------------------------------------------------------------------------------------------

  
Functional Examples/Snippets:

<!--
	Return Policy:
	
	INDEX.HTML:
	<span id="KISS_RETURN_POLICY">okay no problem!</span>
-->
<fieldset class='labelsAsBreaks' data-onfocus="$('#KISS_RETURN_POLICY_TEXTAREA').val(kiss_inspect('KISS_RETURN_POLICY').html());">
	<legend>Returns</legend>
	<div><textarea onKeyUp="kiss_implement('set-value',{'id':'KISS_RETURN_POLICY','$input':$(this)});" id="KISS_RETURN_POLICY_TEXTAREA" placeholder='Policy'></textarea></div>
</fieldset>


<!-- 
	Company Logo: The Company Logo ID will be selected, put into the template.
		
	INDEX.HTML: 
	<img alt="3gss940817_royal_blue_backside.jpg" bgcolor="ffffff" data-label="Company Logo (200 x 150)" data-object="KISS" id="LOGO" src="https://www-sporks-zoovy-com.app-hosted.com/media/img/sporks/W300-H85-Bffffff/007/3gss940817_royal_blue_backside.jpg" type="IMAGE" height="85" border="0" width="300">
	
-->
<fieldset data-wizard-element-id="LOGO" data-onfocus="kiss_inspect('LOGO');">
	<label>Company Logo</label>
	<button onClick="kiss_inspect('LOGO'); kiss_medialib('LOGO');">Select Image</button>
</fieldset>



<!--
	SHIPPING POLICY + OPTIONAL SHIPPING LOGOS:
	
	<span data-label="Shipping Policy" data-object="KISS" id="KISS_SHIPPING_POLICY">shipping lorem ipsum</span>
	<div align="center">
		<img src="fedex_logo.png" data-object="KISS" id="KISS_SHIPPING_FEDEXLOGO" alt="fedex logo(tm)" height="75" width="75">
		<img src="ups_logo.png" data-object="KISS" id="KISS_SHIPPING_UPSLOGO" alt="ups(tm) logo" height="75" width="75">
		<img src="usps_logo.png" data-object="KISS" id="KISS_SHIPPING_USPSLOGO" alt="usps(tm) logo" height="75" width="75">
	</div>

-->
<fieldset class='labelsAsBreaks'  data-onfocus="(function(){
	// check to make sure all fields actually exist:
	if (!kiss_exists(["KISS_SHIPPING_FEDEXLOGO","KISS_SHIPPING_UPSLOGO","KISS_SHIPPING_USPSLOGO"])) { return(false); }
	// initialize all fields to their default value:
	$('#KISS_SHIPPING_POLICY_TEXTAREA').val(kiss_inspect('KISS_SHIPPING_POLICY').html());
	$('#KISS_SHIPPING_FEDEXLOGO_CB').prop('checked', kiss_inspect('KISS_SHIPPING_FEDEXLOGO').is(":visible") );
	$('#KISS_SHIPPING_UPSLOGO_CB').prop('checked', kiss_inspect('KISS_SHIPPING_UPSLOGO').is(":visible") );
	$('#KISS_SHIPPING_USPSLOGO_CB').prop('checked', kiss_inspect('KISS_SHIPPING_USPSLOGO').is(":visible") );
	return(true);
	})()">
	<legend>Shipping</legend>
	<div><textarea id='KISS_SHIPPING_POLICY_TEXTAREA' onKeyUp="kiss_inspect('KISS_SHIPPING_POLICY'); kiss_implement('KISS_SHIPPING_POLICY','set-value',{'$html':$(this)});" placeholder='Policy'></textarea></div>

	<label><input type='checkbox' name='fedex' id='KISS_SHIPPING_FEDEXLOGO_CB' onChange="kiss_implement('KISS_SHIPPING_FEDEXLOGO', ($(this).is(':checked'))?'show':'hide') );"/>Fedex Logo</label>

	<label><input type='checkbox' name='ups' id='KISS_SHIPPING_FEDEXLOGO_CB' onChange="kiss_implement('KISS_SHIPPING_UPSLOGO', ($(this).is(':checked'))?'show':'hide') );"/>UPS Logo</label>

	<label><input type='checkbox' name='usps' id='KISS_SHIPPING_FEDEXLOGO_CB' onChange="kiss_implement('KISS_SHIPPING_USPSLOGO', ($(this).is(':checked'))?'show':'hide') );"/>Fedex Logo</label>
</fieldset>

<!--

	COLOR/THEME CHOOSER
	
	INDEX.HTML
	<style>
	div.themed { }
	div.theme_red { background-color: #FF0000; }
	div.theme_white { background-color: #FFFFF; }
	div.theme_blue { background-color: #0000FF; }
	</style>
	
	<!-- we use the hidden input type to store the selected theme in case the user runs the wizard again -->
	<input type="hidden" id="KISS_COLOR_SCHEME" name="KISS_COLOR_SCHEME" value="" />  
	<div class="themed"></div>
	<img id="SOME_THEME_IMAGE" src="title-white.png" class="themed"></img>
	
-->
<fieldset class='labelsAsBreaks' data-onFocus="(function(){
		$('#KISS_COLOR_SCHEME_SELECT').val( kiss_inspect('KISS_COLOR_SCHEME').val() );
	})()">
	<legend>Choose Color Palette</legend>
	<label for="KISS_COLOR_SCHEME_SELECT"><select onChange="(function(){
		var selectedTheme = $(this).val();
		kiss_implement( '#SOME_THEME_IMAGE', 'set-attrib', { 'src':'title-'+selectedTheme'.png' });
		// JT: not sure if this is the best way to accomplish select anything with themed then add appropriate class.
		//     should we be using kiss_inspect here? or is this fine? (I feel strongly we ought to be using some type of kiss_selector)
		$('.themed').removeClass('theme_red theme_white theme_blue');
		$('.themed').addClass( "theme_"+selectedTheme );
	})()" id="KISS_COLOR_SCHEME_SELECT" name="KISS_COLOR_SCHEME_SELECT">
		<option value="blue">Blue</option>
		<option value="white">White</option>
		<option value="red">Red</option>
	</select>
	</label>
</fieldset>


<!-- 
	LINK TO AN EBAY STORE
	first: kiss_query('ebay-store-id')
	then link to: http://stores.ebay.com/STORE_ID
-->



<!--

	DYNAMIC EBAY CATEGORY LIST:

	dynamically loads the store name + list of categories using kiss_query
	populates the wizard panel dynamically with checkboxes to let users choose/exclude categories
	at the bottom of the list has a "Configure Template" button that populates a <ul> with <li><a href="link_to_store">category name</a></li>
	
	<ul id="EBAY_CATEGORY_LINKS">
	</ul>
	
-->
<fieldset class='labelsAsBreaks' data-onFocus="(function(){
	// get the ebay store id using kiss_query
	$('#ebay-store-idspan').val( kiss_query('ebay-store-id') );
	// empty the previewer (in case we've been here before)
	$('EBAY_CATEGORIES_PREVIEW').empty();
	kiss_query('ebay-store-categories').each(
		function(ebaycat){
			ebayCatId = ebaycat.categoryID;
			ebayCatName = ebaycat.categoryName;
			$('EBAY_CATEGORIES_PREVIEW').append('<li><input checked=&quot;true&quot; class=&quot;ebaycategory&quot; data-catname=&quot;'+ebaycatname+'&quot; data-catid=&quot;'+ebayCatId+'&quot;>'+ebayCatName+'</input></li>');
			}
		);
	})()">
	<legend>Choose eBay Store Categories</legend>
	<div>eBay Store Id:<span id="ebay-store-idspan"></span></div>
	<div><i>Included Categories:</i></div>
	<ul id="EBAY_CATEGORIES_PREVIEW">
		<!-- the data-onFocus will automatically update this, it might make sense to have a loading graphic here,
			users will check boxes for which categories they want to link -->
	</ul>
	<input type="button" onClick="(function(){
		var ebay_store_id = $('#ebay-store-idspan').val();
		kiss_implement('EBAY_CATEGORY_LINKS','empty');
		$('.ebaycategory').each(function(in){
			var catlink = 'http://stores.ebay.com/'+ebay_store_id'+?_sacat='+in.data('catid');
			var catname = in.data('catname');
			if (in.is(':checked')) { kiss_implement('EBAY_CATEGORY_LINKS','append',{ '$html':'<li><a href=&quot;'+catlink+'&quot;>'+catname+'</li>' }); }
			});">Configure Template</input>
</fieldset>


